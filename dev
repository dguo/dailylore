#!/usr/bin/env python
# ./dev --help

from __future__ import print_function

import argparse
from httplib import BadStatusLine
import socket
from subprocess import call
from time import sleep
import sys
import urllib2

def up(args):
    call(['docker-compose', 'up', '--build', '--remove-orphans', '-d'])
    try:
        call(['docker-compose', 'logs', '-f'])
    except KeyboardInterrupt:
        pass

def sh(args):
    call(['docker-compose', 'exec', 'web', 'sh'])

def prod(args):
    call(['docker-compose', '-f', 'docker-compose.prod.yml', 'up',
          '--build', '--remove-orphans'])
    call(['docker-compose', '-f', 'logs'])

def down(args):
    call(['docker-compose', 'down', '--remove-orphans', '--rmi', 'local'])
    call(['docker-compose', '-f', 'docker-compose.prod.yml', 'down',
          '--remove-orphans', '--rmi', 'local'])

def wait_for_server(url):
    attempts = 0
    while attempts < 300:
        try:
            if urllib2.urlopen(url).getcode() == 200:
                print('The server is up.')
                return
        except (socket.error, BadStatusLine, urllib2.URLError):
            pass

        sleep(1)
        attempts += 1

    print('The server never came up.')
    sys.exit(1)

def ci(args):
    try:
        wait_for_server('http://localhost:8080')

        lint_command = ['docker-compose', '-f', 'docker-compose.prod.yml',
                        'run', 'web', 'yarn', 'run', 'lint:ci']
        test_command = ['docker-compose', '-f', 'docker-compose.prod.yml',
                        'run', 'web', 'yarn', 'test']
        if not args.test:
            return_code = call(lint_command)
            if return_code != 0:
                print('Linting failed.')
                sys.exit(1)
        if not args.lint:
            return_code = call(test_command)
            if return_code != 0:
                print('Tests failed.')
                sys.exit(1)
    except KeyboardInterrupt:
        sys.exit()

parser = argparse.ArgumentParser(prog='./dev')
subparsers = parser.add_subparsers(help='Available commands')

parser_up = subparsers.add_parser('up',
                                  help='Bring up the development enviroment')
parser_up.set_defaults(func=up)

parser_sh = subparsers.add_parser('sh',
                                  help='Bring up a shell')
parser_sh.set_defaults(func=sh)

parser_prod = subparsers.add_parser('prod',
                                    help='Bring up the production environment')
parser_prod.set_defaults(func=prod)

parser_down = subparsers.add_parser('down',
                                    help='Bring down environments and clean up')
parser_down.set_defaults(func=down)

parser_ci = subparsers.add_parser('ci',
                                  help='Run linting and/or tests')
parser_ci_group = parser_ci.add_mutually_exclusive_group()
parser_ci_group.add_argument('-l', '--lint', action='store_true',
                             help='Only lint')
parser_ci_group.add_argument('-t', '--test', action='store_true',
                             help='Only run the tests')
parser_ci.set_defaults(func=ci)

args = parser.parse_args()
args.func(args)
