#!/usr/bin/env python3
# ./dev --help

import argparse
from http.client import HTTPException
import os
import socket
from subprocess import run
import sys
from threading import Thread
import time
from urllib.error import URLError
from urllib.request import urlopen
import webbrowser

LOCAL_URL = 'http://localhost:8080'

def open_in_browser():
    while True:
        try:
            urlopen(LOCAL_URL)
            webbrowser.open(LOCAL_URL)
            return
        except (ConnectionError, URLError, HTTPException):
            time.sleep(1)

def command(help):
    def decorator(func):
        parser = subparsers.add_parser(func.__name__, help=help)
        parser.set_defaults(func=func)
        return func
    return decorator

parser = argparse.ArgumentParser(prog='./dev')
subparsers = parser.add_subparsers(metavar='<command>', title='commands')

@command('Format the code')
def format(args, remaining):
    return run(['yarn', 'run', 'format']).returncode

@command('Lint the code')
def lint(args, remaining):
    return run(['yarn', 'run', 'lint']).returncode

@command('Open the website in your browser')
def open(args, remaining):
    webbrowser.open(LOCAL_URL)

@command('Start development')
def start(args, remaining):
    Thread(target=open_in_browser).start()
    run(['yarn', 'run', 'start'])

@command('Run end to end tests')
def test(args, remaining):
    return run(['yarn', 'run', 'test'] + (remaining or [])).returncode

if __name__ == '__main__':
    if len(sys.argv) > 1:
        args, remaining = parser.parse_known_args()
        try:
            returncode = args.func(args, remaining)
            sys.exit(returncode if returncode else 0)
        except KeyboardInterrupt:
            pass
    else:
        parser.print_help()
